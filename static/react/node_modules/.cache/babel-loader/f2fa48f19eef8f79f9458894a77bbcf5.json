{"ast":null,"code":"var _jsxFileName = \"/Users/leung/Desktop/Hackathon/2021-Spring-Treehacks/food-carbon-footprint/static/react/src/pages/Food.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport './Food.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Food = () => {\n  _s();\n\n  const [img, setImg] = useState(null);\n  const [foods, setFoods] = useState([]);\n  const [carbons, setCarbons] = useState([]);\n  const [equiv, setEquiv] = useState({\n    mi: '',\n    gas: '',\n    coal: '',\n    phone: '',\n    trees: ''\n  });\n  const serverEndpoint = 'http://localhost:5000';\n\n  const submitForm = e => {\n    e.preventDefault();\n    let userInput = document.getElementById('image-upload').value;\n    fetch(serverEndpoint + '/ingredients?query_url=' + userInput).then(response => response.json()).then(parsedResponse => {\n      setImg(parsedResponse.img);\n      setFoods(parsedResponse.foods);\n      setCarbons(parsedResponse.carbons);\n      setEquiv(parsedResponse.equiv);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"container\",\n    style: {\n      \"padding-top\": '100px'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Carbon Emission from Food Sources\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"query_url\",\n        placeholder: \"Paste in a URL of an image\",\n        id: \"image-upload\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"submit\",\n        value: \"Submit\",\n        className: \"sub\",\n        onClick: submitForm\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }, this), img && /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"pic\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Your submission: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        id: \"query-img\",\n        src: img\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 21\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"ingredients\",\n      children: [foods && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Food Matches\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: foods.map(item => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: item\n          }, item, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 37\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(DisplayResults, {\n        carbons: carbons,\n        equiv: equiv\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Food, \"YwoChbNvVJlrkpzWVM+Sn3+qBLM=\");\n\n_c = Food;\n\nconst DisplayResults = _ref => {\n  let {\n    carbons,\n    equiv\n  } = _ref;\n\n  if (!carbons) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 16\n    }, this);\n  }\n\n  if (carbons.length === 0) {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Match Failure\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Unfortunately, we weren't able to match your picture with an item in our food to carbon database.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Please try another image.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Greenhouse Gas Emissions\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n      children: [\"In Lbs of CO\", /*#__PURE__*/_jsxDEV(\"sub\", {\n        children: \"2\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 29\n      }, this), \" per Kilogram of Food Product\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: carbons.map(item => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [item[0], \": \", item[1]]\n      }, item[0], true, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"That could mean the equivalent of...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: [/*#__PURE__*/_jsxDEV(\"li\", {\n        children: [\"Greenhouse gas emissions from \", /*#__PURE__*/_jsxDEV(\"b\", {\n          children: equiv[\"mi\"]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 51\n        }, this), \" miles driven by an average passenger vehicle\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [\"CO\", /*#__PURE__*/_jsxDEV(\"sub\", {\n          children: \"2\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 23\n        }, this), \" emissions from \", /*#__PURE__*/_jsxDEV(\"b\", {\n          children: equiv[\"gas\"]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 51\n        }, this), \" gallons of gasoline consumed\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [\"CO\", /*#__PURE__*/_jsxDEV(\"sub\", {\n          children: \"2\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 23\n        }, this), \" emissions from \", /*#__PURE__*/_jsxDEV(\"b\", {\n          children: equiv[\"coal\"]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 51\n        }, this), \" pounds of coal burned\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [\"CO\", /*#__PURE__*/_jsxDEV(\"sub\", {\n          children: \"2\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 23\n        }, this), \" emissions from \", /*#__PURE__*/_jsxDEV(\"b\", {\n          children: equiv[\"phone\"]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 51\n        }, this), \" phones charged\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [\"Carbon sequested by \", /*#__PURE__*/_jsxDEV(\"b\", {\n          children: equiv[\"trees\"]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 41\n        }, this), \" tree saplings grown for 10 years\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_c2 = DisplayResults;\nexport default Food;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Food\");\n$RefreshReg$(_c2, \"DisplayResults\");","map":{"version":3,"sources":["/Users/leung/Desktop/Hackathon/2021-Spring-Treehacks/food-carbon-footprint/static/react/src/pages/Food.js"],"names":["useState","Food","img","setImg","foods","setFoods","carbons","setCarbons","equiv","setEquiv","mi","gas","coal","phone","trees","serverEndpoint","submitForm","e","preventDefault","userInput","document","getElementById","value","fetch","then","response","json","parsedResponse","map","item","DisplayResults","length"],"mappings":"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","sourcesContent":["import {useState} from 'react';\nimport './Food.css';\n\nconst Food = () => {\n    const [img, setImg] = useState(null);\n    const [foods, setFoods] = useState([]);\n    const [carbons, setCarbons] = useState([]);\n    const [equiv, setEquiv] = useState({\n        mi: '',\n        gas: '',\n        coal: '',\n        phone: '',\n        trees: '',\n    });\n    const serverEndpoint = 'http://localhost:5000';\n    const submitForm = (e) => {\n        e.preventDefault();\n        let userInput = document.getElementById('image-upload').value;\n        fetch(serverEndpoint + '/ingredients?query_url=' + userInput\n        ).then(response => response.json()\n        ).then(parsedResponse => {\n            setImg(parsedResponse.img);\n            setFoods(parsedResponse.foods);\n            setCarbons(parsedResponse.carbons);\n            setEquiv(parsedResponse.equiv);\n        });\n    }\n\n    return (\n        <div id=\"container\" style={{\"padding-top\": '100px'}}>\n            <h2>Carbon Emission from Food Sources</h2>\n            <form>\n                <input type=\"text\" name=\"query_url\" placeholder=\"Paste in a URL of an image\" id=\"image-upload\" />\n                <input type=\"submit\" value=\"Submit\" className=\"sub\" onClick={submitForm}/>\n            </form>\n            {\n                img && (\n                    <div id=\"pic\">\n                        <h2>Your submission: </h2>\n                        <img id=\"query-img\" src={img} />\n                    </div>\n                )\n            }\n            <div id=\"ingredients\">\n                {\n                    foods && (\n                        <div>\n                            <h2>Food Matches</h2>\n                            <ul>\n                                {foods.map(item => (\n                                    <li key={item}>{item}</li>\n                                ))}\n                            </ul>\n                        </div>\n                    )\n                }\n                <br />\n                <DisplayResults carbons={carbons} equiv={equiv} />\n            </div>\n        </div>\n    );\n}\n\nconst DisplayResults = ({carbons, equiv}) => {\n    if(!carbons) {\n        return <div></div>\n    }\n    if(carbons.length === 0){\n        return (\n            <>\n                <h3>Match Failure</h3>\n                <p>Unfortunately, we weren't able to match your picture with an item in our food to carbon database.</p>\n                <p>Please try another image.</p>\n            </>\n        );\n    }\n    return (\n        <>\n            <h2>Greenhouse Gas Emissions</h2>\n            <h4>In Lbs of CO<sub>2</sub> per Kilogram of Food Product</h4>\n            <ul>\n                {carbons.map(item => (\n                    <li key={item[0]}>{ item[0] }: {item[1]}</li>\n                ))}\n            </ul>\n            <br />\n            <h3>That could mean the equivalent of...</h3>\n            <ul>\n                <li>Greenhouse gas emissions from <b>{equiv[\"mi\"]}</b> miles driven by an average passenger vehicle</li>\n                <li>CO<sub>2</sub> emissions from <b>{equiv[\"gas\"]}</b> gallons of gasoline consumed</li>\n                <li>CO<sub>2</sub> emissions from <b>{equiv[\"coal\"]}</b> pounds of coal burned</li>\n                <li>CO<sub>2</sub> emissions from <b>{equiv[\"phone\"]}</b> phones charged</li>\n                <li>Carbon sequested by <b>{equiv[\"trees\"]}</b> tree saplings grown for 10 years</li>\n            </ul>\n        </>\n    );\n}\n\nexport default Food;"]},"metadata":{},"sourceType":"module"}